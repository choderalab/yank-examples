---
options:
  minimize: yes
  verbose: yes
  temperature: 300*kelvin
  pressure: 1*atmosphere
  output_dir: explicit
  resume_setup: yes
  resume_simulation: yes
  hydrogen_mass: 2.0 * amu

# Configure the specific molecules we will use for our systems
molecules:
  # Define our Host, cucurbit[7]uril, we can call it whatever we want so we just use its name here as the directive
  CB7:
    filepath: input/host.tripos.mol2
    antechamber: # Specify that missing parameters not in GAFF are acquired through ANTECHAMBER first
      charge_method: null # We pre-computed host charges to save time at YANK run, so set this to null to specify no charge computation method
  # Define our ligand molecule, B2
  B2:
    filepath: input/guest.tripos.mol2
    # Get the partial charges for the ligand by generating them from antechamber with the AM1-BCC charge method
    antechamber:
      charge_method: bcc

solvents:
  rf:
    nonbonded_method: CutoffPeriodic
    switch_distance: 7*angstroms
    nonbonded_cutoff: 8*angstroms
    clearance: 9*angstroms
    positive_ion: Na+
    negative_ion: Cl-

mcmc_moves:
    langevin:
        type: LangevinSplittingDynamicsMove
        timestep: 4.0*femtosecond
        splitting: VRORV
        n_steps: 2500

samplers:
    sams:
        type: SAMSSampler
        mcmc_moves: langevin
        state_update_scheme: global-jump
        gamma0: 10.0
        flatness_threshold: 1.0
        number_of_iterations: 10000
        #online_analysis_minimum_iterations: 10
        #online_analysis_interval: 10
        #online_analysis_target_error: 0.2

# Define the systems: What is the ligand, receptor, and solvent we put them in
systems:
  explicit:
    receptor: CB7
    ligand: B2
    solvent: rf
    leap:
      parameters: [leaprc.protein.ff14SB, leaprc.gaff, leaprc.water.tip4pew]

# The protocols define the alchemical path each phase will take, we use the same lambda values, though they could be different
protocols:
  # Call the protocol whatever you would like, here we name it based on the type of calculation we are running
  absolute-binding:
    complex:
      alchemical_path:
        lambda_electrostatics: [1.00, 0.95, 0.90, 0.80, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
        lambda_sterics:        [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.90, 0.80, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20, 0.15, 0.10, 0.05, 0.00]
    solvent:
      alchemical_path:
        lambda_electrostatics: [1.00, 0.95, 0.90, 0.80, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
        lambda_sterics:        [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.90, 0.80, 0.70, 0.60, 0.50, 0.40, 0.30, 0.20, 0.15, 0.10, 0.05, 0.00]

# Here we combine the system and the protocol to make an expirement
experiments:
  sampler: sams
  system: explicit
  protocol: absolute-binding
  restraint:
    # Note that there is no lambda_electrostatics set in the protocol above, that is because we want the guest to always stay near the host.
    type: Harmonic
